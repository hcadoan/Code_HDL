// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/12/2021 21:37:51"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    bcd3digit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module bcd3digit_vlg_sample_tst(
	ck,
	rs,
	sampler_tx
);
input  ck;
input  rs;
output sampler_tx;

reg sample;
time current_time;
always @(ck or rs)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module bcd3digit_vlg_check_tst (
	bcd0,
	bcd1,
	bcd2,
	sampler_rx
);
input [3:0] bcd0;
input [3:0] bcd1;
input [3:0] bcd2;
input sampler_rx;

reg [3:0] bcd0_expected;
reg [3:0] bcd1_expected;
reg [3:0] bcd2_expected;

reg [3:0] bcd0_prev;
reg [3:0] bcd1_prev;
reg [3:0] bcd2_prev;

reg [3:0] bcd0_expected_prev;
reg [3:0] bcd1_expected_prev;
reg [3:0] bcd2_expected_prev;

reg [3:0] last_bcd0_exp;
reg [3:0] last_bcd1_exp;
reg [3:0] last_bcd2_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	bcd0_prev = bcd0;
	bcd1_prev = bcd1;
	bcd2_prev = bcd2;
end

// update expected /o prevs

always @(trigger)
begin
	bcd0_expected_prev = bcd0_expected;
	bcd1_expected_prev = bcd1_expected;
	bcd2_expected_prev = bcd2_expected;
end


// expected bcd0[ 3 ]
initial
begin
	bcd0_expected[3] = 1'bX;
end 
// expected bcd0[ 2 ]
initial
begin
	bcd0_expected[2] = 1'bX;
end 
// expected bcd0[ 1 ]
initial
begin
	bcd0_expected[1] = 1'bX;
end 
// expected bcd0[ 0 ]
initial
begin
	bcd0_expected[0] = 1'bX;
end 
// expected bcd1[ 3 ]
initial
begin
	bcd1_expected[3] = 1'bX;
end 
// expected bcd1[ 2 ]
initial
begin
	bcd1_expected[2] = 1'bX;
end 
// expected bcd1[ 1 ]
initial
begin
	bcd1_expected[1] = 1'bX;
end 
// expected bcd1[ 0 ]
initial
begin
	bcd1_expected[0] = 1'bX;
end 
// expected bcd2[ 3 ]
initial
begin
	bcd2_expected[3] = 1'bX;
end 
// expected bcd2[ 2 ]
initial
begin
	bcd2_expected[2] = 1'bX;
end 
// expected bcd2[ 1 ]
initial
begin
	bcd2_expected[1] = 1'bX;
end 
// expected bcd2[ 0 ]
initial
begin
	bcd2_expected[0] = 1'bX;
end 
// generate trigger
always @(bcd0_expected or bcd0 or bcd1_expected or bcd1 or bcd2_expected or bcd2)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected bcd0 = %b | expected bcd1 = %b | expected bcd2 = %b | ",bcd0_expected_prev,bcd1_expected_prev,bcd2_expected_prev);
	$display("| real bcd0 = %b | real bcd1 = %b | real bcd2 = %b | ",bcd0_prev,bcd1_prev,bcd2_prev);
`endif
	if (
		( bcd0_expected_prev[0] !== 1'bx ) && ( bcd0_prev[0] !== bcd0_expected_prev[0] )
		&& ((bcd0_expected_prev[0] !== last_bcd0_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd0_expected_prev);
		$display ("     Real value = %b", bcd0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bcd0_exp[0] = bcd0_expected_prev[0];
	end
	if (
		( bcd0_expected_prev[1] !== 1'bx ) && ( bcd0_prev[1] !== bcd0_expected_prev[1] )
		&& ((bcd0_expected_prev[1] !== last_bcd0_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd0_expected_prev);
		$display ("     Real value = %b", bcd0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bcd0_exp[1] = bcd0_expected_prev[1];
	end
	if (
		( bcd0_expected_prev[2] !== 1'bx ) && ( bcd0_prev[2] !== bcd0_expected_prev[2] )
		&& ((bcd0_expected_prev[2] !== last_bcd0_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd0_expected_prev);
		$display ("     Real value = %b", bcd0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bcd0_exp[2] = bcd0_expected_prev[2];
	end
	if (
		( bcd0_expected_prev[3] !== 1'bx ) && ( bcd0_prev[3] !== bcd0_expected_prev[3] )
		&& ((bcd0_expected_prev[3] !== last_bcd0_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd0_expected_prev);
		$display ("     Real value = %b", bcd0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bcd0_exp[3] = bcd0_expected_prev[3];
	end
	if (
		( bcd1_expected_prev[0] !== 1'bx ) && ( bcd1_prev[0] !== bcd1_expected_prev[0] )
		&& ((bcd1_expected_prev[0] !== last_bcd1_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd1_expected_prev);
		$display ("     Real value = %b", bcd1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_bcd1_exp[0] = bcd1_expected_prev[0];
	end
	if (
		( bcd1_expected_prev[1] !== 1'bx ) && ( bcd1_prev[1] !== bcd1_expected_prev[1] )
		&& ((bcd1_expected_prev[1] !== last_bcd1_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd1_expected_prev);
		$display ("     Real value = %b", bcd1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_bcd1_exp[1] = bcd1_expected_prev[1];
	end
	if (
		( bcd1_expected_prev[2] !== 1'bx ) && ( bcd1_prev[2] !== bcd1_expected_prev[2] )
		&& ((bcd1_expected_prev[2] !== last_bcd1_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd1_expected_prev);
		$display ("     Real value = %b", bcd1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_bcd1_exp[2] = bcd1_expected_prev[2];
	end
	if (
		( bcd1_expected_prev[3] !== 1'bx ) && ( bcd1_prev[3] !== bcd1_expected_prev[3] )
		&& ((bcd1_expected_prev[3] !== last_bcd1_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd1_expected_prev);
		$display ("     Real value = %b", bcd1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_bcd1_exp[3] = bcd1_expected_prev[3];
	end
	if (
		( bcd2_expected_prev[0] !== 1'bx ) && ( bcd2_prev[0] !== bcd2_expected_prev[0] )
		&& ((bcd2_expected_prev[0] !== last_bcd2_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd2_expected_prev);
		$display ("     Real value = %b", bcd2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_bcd2_exp[0] = bcd2_expected_prev[0];
	end
	if (
		( bcd2_expected_prev[1] !== 1'bx ) && ( bcd2_prev[1] !== bcd2_expected_prev[1] )
		&& ((bcd2_expected_prev[1] !== last_bcd2_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd2_expected_prev);
		$display ("     Real value = %b", bcd2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_bcd2_exp[1] = bcd2_expected_prev[1];
	end
	if (
		( bcd2_expected_prev[2] !== 1'bx ) && ( bcd2_prev[2] !== bcd2_expected_prev[2] )
		&& ((bcd2_expected_prev[2] !== last_bcd2_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd2_expected_prev);
		$display ("     Real value = %b", bcd2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_bcd2_exp[2] = bcd2_expected_prev[2];
	end
	if (
		( bcd2_expected_prev[3] !== 1'bx ) && ( bcd2_prev[3] !== bcd2_expected_prev[3] )
		&& ((bcd2_expected_prev[3] !== last_bcd2_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bcd2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bcd2_expected_prev);
		$display ("     Real value = %b", bcd2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_bcd2_exp[3] = bcd2_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module bcd3digit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg ck;
reg rs;
// wires                                               
wire [3:0] bcd0;
wire [3:0] bcd1;
wire [3:0] bcd2;

wire sampler;                             

// assign statements (if any)                          
bcd3digit i1 (
// port map - connection between master ports and signals/registers   
	.bcd0(bcd0),
	.bcd1(bcd1),
	.bcd2(bcd2),
	.ck(ck),
	.rs(rs)
);

// ck
initial
begin
	ck = 1'b0;
	ck = #10000 1'b1;
	ck = #10000 1'b0;
	ck = #10000 1'b1;
	ck = #10000 1'b0;
	ck = #10000 1'b1;
	ck = #10000 1'b0;
	ck = #10000 1'b1;
	ck = #10000 1'b0;
	ck = #10000 1'b1;
	ck = #10000 1'b0;
	ck = #10000 1'b1;
	ck = #10000 1'b0;
	ck = #10000 1'b1;
	ck = #10000 1'b0;
	ck = #10000 1'b1;
	ck = #10000 1'b0;
	ck = #10000 1'b1;
	ck = #10000 1'b0;
	ck = #10000 1'b1;
	ck = #10000 1'b0;
	ck = #10000 1'b1;
	ck = #10000 1'b0;
	ck = #10000 1'b1;
	ck = #10000 1'b0;
	ck = #10000 1'b1;
	ck = #10000 1'b0;
	ck = #10000 1'b1;
	ck = #10000 1'b0;
	ck = #10000 1'b1;
	ck = #10000 1'b0;
	ck = #10000 1'b1;
	ck = #10000 1'b0;
	ck = #10000 1'b1;
	ck = #10000 1'b0;
	ck = #10000 1'b1;
	ck = #10000 1'b0;
	ck = #10000 1'b1;
	ck = #10000 1'b0;
	ck = #10000 1'b1;
	ck = #10000 1'b0;
	ck = #10000 1'b1;
	ck = #10000 1'b0;
	ck = #10000 1'b1;
	ck = #10000 1'b0;
	ck = #10000 1'b1;
	ck = #10000 1'b0;
	ck = #10000 1'b1;
	ck = #10000 1'b0;
	ck = #10000 1'b1;
	ck = #10000 1'b0;
	ck = #10000 1'b1;
	ck = #10000 1'b0;
	ck = #10000 1'b1;
	ck = #10000 1'b0;
	ck = #10000 1'b1;
	ck = #10000 1'b0;
	ck = #10000 1'b1;
	ck = #10000 1'b0;
	ck = #10000 1'b1;
	ck = #10000 1'b0;
	ck = #10000 1'b1;
	ck = #10000 1'b0;
end 

// rs
initial
begin
	rs = 1'b0;
end 

bcd3digit_vlg_sample_tst tb_sample (
	.ck(ck),
	.rs(rs),
	.sampler_tx(sampler)
);

bcd3digit_vlg_check_tst tb_out(
	.bcd0(bcd0),
	.bcd1(bcd1),
	.bcd2(bcd2),
	.sampler_rx(sampler)
);
endmodule

