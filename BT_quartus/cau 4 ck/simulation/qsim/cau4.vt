// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/24/2021 21:42:49"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    cau4
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module cau4_vlg_sample_tst(
	DATA,
	ck,
	rs,
	sampler_tx
);
input  DATA;
input  ck;
input  rs;
output sampler_tx;

reg sample;
time current_time;
always @(DATA or ck or rs)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module cau4_vlg_check_tst (
	Y1,
	Y2,
	c,
	sampler_rx
);
input  Y1;
input  Y2;
input [3:0] c;
input sampler_rx;

reg  Y1_expected;
reg  Y2_expected;
reg [3:0] c_expected;

reg  Y1_prev;
reg  Y2_prev;
reg [3:0] c_prev;

reg  Y1_expected_prev;
reg  Y2_expected_prev;
reg [3:0] c_expected_prev;

reg  last_Y1_exp;
reg  last_Y2_exp;
reg [3:0] last_c_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	Y1_prev = Y1;
	Y2_prev = Y2;
	c_prev = c;
end

// update expected /o prevs

always @(trigger)
begin
	Y1_expected_prev = Y1_expected;
	Y2_expected_prev = Y2_expected;
	c_expected_prev = c_expected;
end


// expected c[ 3 ]
initial
begin
	c_expected[3] = 1'bX;
end 
// expected c[ 2 ]
initial
begin
	c_expected[2] = 1'bX;
end 
// expected c[ 1 ]
initial
begin
	c_expected[1] = 1'bX;
end 
// expected c[ 0 ]
initial
begin
	c_expected[0] = 1'bX;
end 

// expected Y1
initial
begin
	Y1_expected = 1'bX;
end 

// expected Y2
initial
begin
	Y2_expected = 1'bX;
end 
// generate trigger
always @(Y1_expected or Y1 or Y2_expected or Y2 or c_expected or c)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Y1 = %b | expected Y2 = %b | expected c = %b | ",Y1_expected_prev,Y2_expected_prev,c_expected_prev);
	$display("| real Y1 = %b | real Y2 = %b | real c = %b | ",Y1_prev,Y2_prev,c_prev);
`endif
	if (
		( Y1_expected_prev !== 1'bx ) && ( Y1_prev !== Y1_expected_prev )
		&& ((Y1_expected_prev !== last_Y1_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y1_expected_prev);
		$display ("     Real value = %b", Y1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Y1_exp = Y1_expected_prev;
	end
	if (
		( Y2_expected_prev !== 1'bx ) && ( Y2_prev !== Y2_expected_prev )
		&& ((Y2_expected_prev !== last_Y2_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y2_expected_prev);
		$display ("     Real value = %b", Y2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Y2_exp = Y2_expected_prev;
	end
	if (
		( c_expected_prev[0] !== 1'bx ) && ( c_prev[0] !== c_expected_prev[0] )
		&& ((c_expected_prev[0] !== last_c_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_c_exp[0] = c_expected_prev[0];
	end
	if (
		( c_expected_prev[1] !== 1'bx ) && ( c_prev[1] !== c_expected_prev[1] )
		&& ((c_expected_prev[1] !== last_c_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_c_exp[1] = c_expected_prev[1];
	end
	if (
		( c_expected_prev[2] !== 1'bx ) && ( c_prev[2] !== c_expected_prev[2] )
		&& ((c_expected_prev[2] !== last_c_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_c_exp[2] = c_expected_prev[2];
	end
	if (
		( c_expected_prev[3] !== 1'bx ) && ( c_prev[3] !== c_expected_prev[3] )
		&& ((c_expected_prev[3] !== last_c_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_c_exp[3] = c_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module cau4_vlg_vec_tst();
// constants                                           
// general purpose registers
reg DATA;
reg ck;
reg rs;
// wires                                               
wire Y1;
wire Y2;
wire [3:0] c;

wire sampler;                             

// assign statements (if any)                          
cau4 i1 (
// port map - connection between master ports and signals/registers   
	.DATA(DATA),
	.Y1(Y1),
	.Y2(Y2),
	.c(c),
	.ck(ck),
	.rs(rs)
);

// ck
initial
begin
	ck = 1'b0;
	ck = #10000 1'b1;
	ck = #20000 1'b0;
	ck = #20000 1'b1;
	ck = #20000 1'b0;
	ck = #20000 1'b1;
	ck = #20000 1'b0;
	ck = #20000 1'b1;
	ck = #20000 1'b0;
	ck = #20000 1'b1;
	ck = #20000 1'b0;
	ck = #20000 1'b1;
	ck = #20000 1'b0;
	ck = #20000 1'b1;
	ck = #20000 1'b0;
	ck = #20000 1'b1;
	ck = #20000 1'b0;
	ck = #20000 1'b1;
	ck = #20000 1'b0;
	ck = #20000 1'b1;
	ck = #20000 1'b0;
	ck = #20000 1'b1;
	ck = #20000 1'b0;
	ck = #20000 1'b1;
	ck = #20000 1'b0;
	ck = #20000 1'b1;
	ck = #20000 1'b0;
	ck = #20000 1'b1;
	ck = #20000 1'b0;
	ck = #20000 1'b1;
	ck = #20000 1'b0;
	ck = #20000 1'b1;
	ck = #20000 1'b0;
	ck = #20000 1'b1;
	ck = #20000 1'b0;
	ck = #20000 1'b1;
	ck = #20000 1'b0;
	ck = #20000 1'b1;
	ck = #20000 1'b0;
	ck = #20000 1'b1;
	ck = #20000 1'b0;
	ck = #20000 1'b1;
	ck = #20000 1'b0;
	ck = #20000 1'b1;
	ck = #20000 1'b0;
end 

// rs
initial
begin
	rs = 1'b0;
	rs = #610000 1'b1;
	rs = #90000 1'b0;
end 

// DATA
initial
begin
	DATA = 1'b0;
	DATA = #10000 1'b1;
	DATA = #220000 1'b0;
	DATA = #20000 1'b1;
	DATA = #70000 1'b0;
	DATA = #80000 1'b1;
	DATA = #220000 1'b0;
	DATA = #60000 1'b1;
	DATA = #100000 1'b0;
end 

cau4_vlg_sample_tst tb_sample (
	.DATA(DATA),
	.ck(ck),
	.rs(rs),
	.sampler_tx(sampler)
);

cau4_vlg_check_tst tb_out(
	.Y1(Y1),
	.Y2(Y2),
	.c(c),
	.sampler_rx(sampler)
);
endmodule

