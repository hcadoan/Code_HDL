--alt_u_div DEVICE_FAMILY="Cyclone II" LPM_PIPELINE=0 MAXIMIZE_SPEED=5 SKIP_BITS=0 WIDTH_D=1 WIDTH_N=5 WIDTH_Q=5 WIDTH_R=1 denominator numerator quotient remainder
--VERSION_BEGIN 13.0 cbx_cycloneii 2013:04:24:18:08:47:SJ cbx_lpm_abs 2013:04:24:18:08:47:SJ cbx_lpm_add_sub 2013:04:24:18:08:47:SJ cbx_lpm_divide 2013:04:24:18:08:47:SJ cbx_mgl 2013:04:24:18:11:10:SJ cbx_stratix 2013:04:24:18:08:47:SJ cbx_stratixii 2013:04:24:18:08:47:SJ cbx_util_mgl 2013:04:24:18:08:47:SJ  VERSION_END


-- Copyright (C) 1991-2013 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.


FUNCTION add_sub_lkc (dataa[0..0], datab[0..0])
RETURNS ( cout, result[0..0]);
FUNCTION add_sub_mkc (dataa[1..0], datab[1..0])
RETURNS ( cout, result[1..0]);

--synthesis_resources = 
SUBDESIGN alt_u_div_cve
( 
	denominator[0..0]	:	input;
	numerator[4..0]	:	input;
	quotient[4..0]	:	output;
	remainder[0..0]	:	output;
) 
VARIABLE 
	add_sub_0 : add_sub_lkc;
	add_sub_1 : add_sub_mkc;
	add_sub_2 : add_sub_mkc;
	add_sub_3 : add_sub_mkc;
	add_sub_4 : add_sub_mkc;
	DenominatorIn[11..0]	: WIRE;
	DenominatorIn_tmp[11..0]	: WIRE;
	gnd_wire	: WIRE;
	nose[29..0]	: WIRE;
	NumeratorIn[29..0]	: WIRE;
	NumeratorIn_tmp[29..0]	: WIRE;
	prestg[9..0]	: WIRE;
	quotient_tmp[4..0]	: WIRE;
	sel[5..0]	: WIRE;
	selnose[29..0]	: WIRE;
	StageIn[11..0]	: WIRE;
	StageIn_tmp[11..0]	: WIRE;
	StageOut[9..0]	: WIRE;

BEGIN 
	add_sub_0.dataa[0..0] = NumeratorIn[4..4];
	add_sub_0.datab[0..0] = DenominatorIn[0..0];
	add_sub_1.dataa[] = ( StageIn[2..2], NumeratorIn[8..8]);
	add_sub_1.datab[1..0] = DenominatorIn[3..2];
	add_sub_2.dataa[] = ( StageIn[4..4], NumeratorIn[12..12]);
	add_sub_2.datab[1..0] = DenominatorIn[5..4];
	add_sub_3.dataa[] = ( StageIn[6..6], NumeratorIn[16..16]);
	add_sub_3.datab[1..0] = DenominatorIn[7..6];
	add_sub_4.dataa[] = ( StageIn[8..8], NumeratorIn[20..20]);
	add_sub_4.datab[1..0] = DenominatorIn[9..8];
	DenominatorIn[] = DenominatorIn_tmp[];
	DenominatorIn_tmp[] = ( DenominatorIn[9..0], ( gnd_wire, denominator[]));
	gnd_wire = B"0";
	nose[] = ( B"00000", add_sub_4.cout, B"00000", add_sub_3.cout, B"00000", add_sub_2.cout, B"00000", add_sub_1.cout, B"00000", add_sub_0.cout);
	NumeratorIn[] = NumeratorIn_tmp[];
	NumeratorIn_tmp[] = ( NumeratorIn[24..0], numerator[]);
	prestg[] = ( add_sub_4.result[], add_sub_3.result[], add_sub_2.result[], add_sub_1.result[], GND, add_sub_0.result[]);
	quotient[] = quotient_tmp[];
	quotient_tmp[] = ( (! selnose[0..0]), (! selnose[6..6]), (! selnose[12..12]), (! selnose[18..18]), (! selnose[24..24]));
	remainder[0..0] = StageIn[10..10];
	sel[] = ( gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire, gnd_wire);
	selnose[] = ( (! nose[29..29]), (! nose[28..28]), (! nose[27..27]), (! nose[26..26]), ((! nose[25..25]) # sel[5..5]), (! nose[24..24]), (! nose[23..23]), (! nose[22..22]), (! nose[21..21]), ((! nose[20..20]) # sel[4..4]), (! nose[19..19]), (! nose[18..18]), (! nose[17..17]), (! nose[16..16]), ((! nose[15..15]) # sel[3..3]), (! nose[14..14]), (! nose[13..13]), (! nose[12..12]), (! nose[11..11]), ((! nose[10..10]) # sel[2..2]), (! nose[9..9]), (! nose[8..8]), (! nose[7..7]), (! nose[6..6]), ((! nose[5..5]) # sel[1..1]), (! nose[4..4]), (! nose[3..3]), (! nose[2..2]), (! nose[1..1]), ((! nose[0..0]) # sel[0..0]));
	StageIn[] = StageIn_tmp[];
	StageIn_tmp[] = ( StageOut[9..0], B"00");
	StageOut[] = ( ((( StageIn[8..8], NumeratorIn[20..20]) & selnose[24..24]) # (prestg[9..8] & (! selnose[24..24]))), ((( StageIn[6..6], NumeratorIn[16..16]) & selnose[18..18]) # (prestg[7..6] & (! selnose[18..18]))), ((( StageIn[4..4], NumeratorIn[12..12]) & selnose[12..12]) # (prestg[5..4] & (! selnose[12..12]))), ((( StageIn[2..2], NumeratorIn[8..8]) & selnose[6..6]) # (prestg[3..2] & (! selnose[6..6]))), ((( StageIn[0..0], NumeratorIn[4..4]) & selnose[0..0]) # (prestg[1..0] & (! selnose[0..0]))));
END;
--VALID FILE
